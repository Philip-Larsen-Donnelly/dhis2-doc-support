{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Guidelines on how to use Markdown, Github and Transifex for our area specific DHIS2 documentation \u00b6 In a nutshell \u00b6 Let's use Markdown as our (main) format for (most of) our documentation (except for binaries), Github as our sharing, collaboration and when applicable, publishing platform, and let's integrate with Transifex to perform translation. Here are the key 4 steps: Fork then clone the repository on Github you want to contribute to Start contributing to the documentation on your local machine using Markdown Push your contribution back to Github and initiate a discussion Merge to make your contribution officially available and ready for translation Goal of these guidelines \u00b6 This document aims: at describing a suggested workflow, step-by-step and related tools to create, edit, share, collaborate, translate and publish area specific documentation related to DHIS2; to be used as guidelines by contributors willing to take part in the DHIS2 documentation effort. By documentation , we refer to any manual, textbook or other document supporting DHIS2 as defined by the GNU Free Documentation License These guidlines are not meant to be a substitute for all the great resources already available out there regarding Github or Markdown, but rather focus on the specifics of the suggested workflow and tools. Therefore, we will try as much as possible to redirect you to available resources to guide you further. Audience \u00b6 This document is intended for contributors to the DHIS2 documentation, who are certainly tech enthusiasts ;) but are not necessarily developers. Context and decision factors \u00b6 Google Docs is a great way to quickly create and collaborate on docs, but styling is not easy to unify, versioning is a bit tricky, publication to a large audience can be risky and it is not integrated with our translation tool. On the other side, we can see with docs.dhis2.org that the combination of Markdown , Github and Transifex allows for all of the above in a structured and secured manner. The 2 main drawbacks that we can see at this stage are that realtime collaboration is not as straight-forward as in Google Drive and we need to get ourselves familiar with Markdown and Github. The good news is: there should soon be a solution for realtime collaboration with Codespaces , currently in limited beta. learning Markdown is reasonably fast. A 10-minute tutorial is all you need to start writing. Practicing & peer support will do the rest. many tutorials (listed below) are available to grasp the basics of Github. We suggest that you go through the First Day on GitHub . Github made teams collaboration more accessible with private repositories with collaborators free of charge . This is useful for our workflow as we may not always want WIP support material, and even sometimes finalised one to be publicly available. As you may have noticed, these guidelines are currently stored in such a repo. Objectives \u00b6 So, we want to implement of a solution that strengthen our documentation process. The workflow to be detailed in the coming sections aims at: reducing the workload related to maintaining area specific documentation; securing the distribution of the documention according to the targeted audience and channels; integrating area specific documentation into the standard documentation workflow whenever possible by using possible the same language (therefore the ssame tools); easing the standardisation of the presentation of the content by using a light and structured language; easing the translation of the training material by creating files in a format that can be integrated in the current workflow; being easy to use, after a short adaptation phase. Workflow and step-by-step guidelines \u00b6 Suggested workflow to contribute to area specific documentation \u00b6 The following sequence diagram 1 illustrates in a simplified way how collaborators should contribute to a specific area documentation such as DHIS2 COVID19 Documentation or DHIS2 Android App. Detailed workflow \u00b6 Below you will find a step-by-step. May you be unfamiliar with Github, we recommnand that take a couple of hours to take the set of free courses \" First Day on GitHub \" Step 0 - Create an account on Github and set up Git \u00b6 Create an account on Github.com Install the Github Deskop client on your machine. Alternatively, and if you feel confident enough, you can use command line and refer to Github help for guidance. Important May you not be with confortable with command line, we highly recommand that you use the Github Deskop client to handle the Github workflow. Step 1, 2 & 3 - Set up a working copy on your computer \u00b6 Fork the repo available on DHIS2's Github account you want to contribute to. This will allow you to quietly work with your own version of the project, without being impacted by the other collaborators' work. In the event that you need to create a new repository that will be added to the documentation workflow, we suggest that you use our template repository . Clone the forked/created from template repository to have it on your local machine and be able to perform any contribution you want to, such as creating a new markdown document or editing a current one. Tools to use A Git client such as Github Desktop . Note You can read more on how to clone and fork repositories using GitHub Desktop . May you want to have more detailed info, or if you deceided you use command line, you can read more on: forking a repository and Creating a repository from a template ; cloning a repository . Note The template repository follows the structure described in the dhis2-docs repo , therefore eases the integration with teh DHIS2 Documentation. Step 4 & 5 - Create a branch and start writing \u00b6 A best practice consists in creating a branch for any contribution you are about to work on. You want to do this via the Github Desktop client you have installed in Step 0 . Create and/or edit your document using Markdown as language. Save your edits in your local repository. Tools to use A Git client such as Github Desktop to create a banch and a text editor such as Typora to work o the document and save it. Note You can read more on how to create a branch using Github Desktop . Step 6 - Stage the changes \u00b6 A best practice consists in preparing and checking and probably more importantly choosing the changes you want to commit, especially of you have done a lot of them in various files. Tools to use A Git client such as Github Desktop . Note You can read more on how to Select changes to include in a commit using Github Desktop . Step 7 - Push to your Github repository \u00b6 Once you have chosen all the changes you want to commit, it is time to push them and make them available on the Github repository you have created in Step 1 . Remember to write a commit message to help other contributors and possible reviewers to understand what you have changed. Tools to use A Git client such as Github Desktop . Note You can read more on how to write a commit message and push your changes using Github Desktop . Step 8 & 9 - Pull request & update of the fork and the area specific documentation repositories \u00b6 The changes you have made are now available in your fork. You want to integrate those with the rest of the documentation that is already available in the repository. To do so, you need to send a pull request and merge. In your fork this process should be fairly straightforward as you are the only one to work on it! When the master branch of your repo includes all the changes you wanted to have, meaning when you have approved the pull request mentioned above, and in order to share and publish these changes with your target audience, you need to create a pull request to the area specific documentation repository. Tools to use Tools: a Git client such as Github Desktop and DHIS2's Github account . Note You can read more on how to create a pull request using Github Desktop and/or create a pull request from a fork . Step 10 - update the doc portal (when identified) \u00b6 When the documentation is merged and if it has been identified that it should be published on the DHIS2 Documentation portal you simply need to create an issue in the DHIS2 Documentation repository and assign it to Phil or Matthieu letting us know that resources should be added. Tools to use Tools: The DHIS2 Documentation Repository . Note You can read more on how to create an issue in a Github repository . Alternatively, and when suitable, the documentation can be published directly in the area specific documentation repository. More guidance will be provided. Step 11, 12, 1, 14 & 15 Translate the documentation (when identified) \u00b6 Note This section will be better described. The documentation produced for specific areas related to DHIS2 such as DHIS2 packages, DHIS2 Academy or DHIS2 Education needs, due to the international footprint of DHIS2, to be translated. The platform to support the translation effort that is integrated with the DHIS2 Documentation and DHIS2 interface is Transifex . Any area specific documentation that is integrated in the DHIS2 Documentation portal is by default pushed as a source file to be translated in Transifex to be translated. Every night the target languages are pulled from Transifex to be built and published in the DHIS2. Please create an issue in the DHIS2 Documentation repository and assign it to Phil (@Philip-Larsen-Donnelly) or Matthieu (@mrwine) letting us know that resources should be added. Documents to be translated and that will remain in the area specific documentation repository without being integrated in the DHIS2 Documentation can still be pushed in Transifex to be translated and translation can be pulled back to the repo. Please create an issue in the DHIS2 Documentation repository and assign it to Phil (@Philip-Larsen-Donnelly) or Matthieu (@mrwine) letting us know that resources should be added. Writing documentation in Markdown \u00b6 This is a focus on the step 5 in our workflow As mentioned earlier in these guidelines any written documentation to be produced and shared with the community or a broader audience should be written in Markdown . In short and as written by John Gruber, who co-developed this language, \"Markdown allows you to write using an easy-to-read, easy-to-write plain text format\" 2 . Its design makes it very easy to write, read and convert. It is this simplicity, versatility and the fact that is is widely used to generate static content that pushed us to adopt Markdown. As mentioned in the DHIS2 Documentation repository README we are following the commonmark markdown language. Important If you are not yet familiar with Markdown, have a look at this cheatsheet and spend 10 minutes going through this tutorial . Tip Try to write as many documents as you can using markdown to fasten the learning process and ease the chane. For example, you can write your meeting notes in markdown Create a new document \u00b6 Open your preferred text editor such as VS Code or Typora Create a new file and save it in your local repository. Edit a document already available in repo \u00b6 This is probably the most straight forward: Open the document in your preferred text editor such as VS Code or Typora Edit and save Tip Remember that you collaborate. This means that other contributors perform changes as well. A best practice is to pull the latest version locally of the repo before starting to edit a document. Convert a document that we have already created \u00b6 A lot of documentation has of course already been created and the purpose of setting up this workflow is to work faster and better. So if some disruption is acceptable as part of the adoption process, we should not lose too much time and spend too many efforts to adapt the content item that are now available and close to be ready to be integrated from Google Drive to Open edX. At the same time, we want to keep in mind that the Markdown files need to be our source files, meaning the files containing the latest available vsersion of the content item. Therefore, we highly recommend to use the add-on Docs to Markdown Install the add-on following the procedure described in the GSuite Marketplace. Open the Google doc you want to convert to Markdown In the menu bar, click on 'Add-ons'>'Docs to Markdown'> Convert In the Docs to Markdown pane onth right hand side, click the button 'Markdown' Select the relevant content, basically everything between the <!----- Conversion time ... -----> and <!-- Docs to Markdown version ... --> Copy the selected content and paste it in a newly created source file in your local repo and save it with the .md extension. Check the result of the conversion: pay attention to the warnings generated during the conversion add the images in the local repository and update the links to match the folder structure update the anchors of the headings by replacing the id with the actual heading preceded with a # and in () The heading needs to be transformed a bit and include the words only, in lowercase and with a - between each word. For example my anchor . replace any remaning html tags with markdown language. This specifically applies to tables and images. Save your edits Extracting images To fasten the extraction of images from Google Doc, we suggest that you download the document as a Web page (.html, zipped) . You will find all you images (unamed and uncropped) in one folder. Converting tables To fasten the conversion, you can use online tools such as TableConvert where you can copy/paste the html table and convert into Markdown. Please note that markdown only allows for simple tables . If you have complex tables with a lot of styling such as merged cells, lists and paragraphs, you will need to think through and adopt another way to present the information. Suggested Tools \u00b6 Tools play a key part in the success in the implementation of these guidelines. Plenty of Markdown editors and convertors are available out there. Provided both our current collaborative environment(s9), Google Drive & Github, and 'philosophy' that we want to follow (open-source, cross-platform,efficient & user friendly tools), we would suggest: Offline editors \u00b6 This should be your preferred to either create or edit. Any text editor, can do the job. We strongly recommend that you use one that one which can help with 1) the light styling of Markdown 2) the rendering. Typora (open source & free), available on Linux, MacOSX and Windows is a nice app, that eases the creation of table and integrates mermaid.js to create diagrams. Visual Studio Code , with the extension Markdown Preview Enhanced is another cross-platform tool This one is a bit more tech savvy. Online editors \u00b6 You may want, especially if you are collaborating using Google Drive, use an online editor. In that regard, the open source StackEdit which is integrated with Google Drive as a 3 rd party app can be a good option. It has a WYSIWYG interface, which is pretty handy when beginning with Markdown and allows you to open or create Markdown files directly from Google Drive, once added as an app. Other Markdown Editors \u00b6 Below is a list of other Markdown editors worth being looked at Offline Atom with the extension Markdown Preview Enhanced , works on Linux, Mac and Windows Online editor Dillinger , free and somehow integrated with Google Drive HAckMD Standalone version of the documentation \u00b6 In some contexts sharing standalone versions of the documentation is mandatory. The worflow needs to be described. We can already mention though that we recommand to Pandod to generate PDF, docx, pptx versions of the documentation. Feel free to reach us for support. A next step - slides, towards a more automatised workflow \u00b6 I am testing tools to use Markdown to create slides and this looks promising. If it is successful this would be a tremendous way forward in terms of integration especially to the translation workflow. More to come... Extra resources \u00b6 GIT and Github \u00b6 GIT Documentation Github Documentation Markdown \u00b6 Commonmark Cheatsheet using mermaid.js , which is integrated in Typora as well as in Atom and Visual Studio Code with the mardown extension Markdown Preview Enhanced \u21a9 source: https://daringfireball.net/projects/markdown/ \u21a9","title":"Guidelines"},{"location":"index.html#guidelines-on-how-to-use-markdown-github-and-transifex-for-our-area-specific-dhis2-documentation","text":"","title":"Guidelines on how to use Markdown, Github and Transifex for our area specific DHIS2 documentation"},{"location":"index.html#in-a-nutshell","text":"Let's use Markdown as our (main) format for (most of) our documentation (except for binaries), Github as our sharing, collaboration and when applicable, publishing platform, and let's integrate with Transifex to perform translation. Here are the key 4 steps: Fork then clone the repository on Github you want to contribute to Start contributing to the documentation on your local machine using Markdown Push your contribution back to Github and initiate a discussion Merge to make your contribution officially available and ready for translation","title":"In a nutshell"},{"location":"index.html#goal-of-these-guidelines","text":"This document aims: at describing a suggested workflow, step-by-step and related tools to create, edit, share, collaborate, translate and publish area specific documentation related to DHIS2; to be used as guidelines by contributors willing to take part in the DHIS2 documentation effort. By documentation , we refer to any manual, textbook or other document supporting DHIS2 as defined by the GNU Free Documentation License These guidlines are not meant to be a substitute for all the great resources already available out there regarding Github or Markdown, but rather focus on the specifics of the suggested workflow and tools. Therefore, we will try as much as possible to redirect you to available resources to guide you further.","title":"Goal of these guidelines"},{"location":"index.html#audience","text":"This document is intended for contributors to the DHIS2 documentation, who are certainly tech enthusiasts ;) but are not necessarily developers.","title":"Audience"},{"location":"index.html#context-and-decision-factors","text":"Google Docs is a great way to quickly create and collaborate on docs, but styling is not easy to unify, versioning is a bit tricky, publication to a large audience can be risky and it is not integrated with our translation tool. On the other side, we can see with docs.dhis2.org that the combination of Markdown , Github and Transifex allows for all of the above in a structured and secured manner. The 2 main drawbacks that we can see at this stage are that realtime collaboration is not as straight-forward as in Google Drive and we need to get ourselves familiar with Markdown and Github. The good news is: there should soon be a solution for realtime collaboration with Codespaces , currently in limited beta. learning Markdown is reasonably fast. A 10-minute tutorial is all you need to start writing. Practicing & peer support will do the rest. many tutorials (listed below) are available to grasp the basics of Github. We suggest that you go through the First Day on GitHub . Github made teams collaboration more accessible with private repositories with collaborators free of charge . This is useful for our workflow as we may not always want WIP support material, and even sometimes finalised one to be publicly available. As you may have noticed, these guidelines are currently stored in such a repo.","title":"Context and decision factors"},{"location":"index.html#objectives","text":"So, we want to implement of a solution that strengthen our documentation process. The workflow to be detailed in the coming sections aims at: reducing the workload related to maintaining area specific documentation; securing the distribution of the documention according to the targeted audience and channels; integrating area specific documentation into the standard documentation workflow whenever possible by using possible the same language (therefore the ssame tools); easing the standardisation of the presentation of the content by using a light and structured language; easing the translation of the training material by creating files in a format that can be integrated in the current workflow; being easy to use, after a short adaptation phase.","title":"Objectives"},{"location":"index.html#workflow-and-step-by-step-guidelines","text":"","title":"Workflow and step-by-step guidelines"},{"location":"index.html#suggested-workflow-to-contribute-to-area-specific-documentation","text":"The following sequence diagram 1 illustrates in a simplified way how collaborators should contribute to a specific area documentation such as DHIS2 COVID19 Documentation or DHIS2 Android App.","title":"Suggested workflow to contribute to area specific documentation"},{"location":"index.html#detailed-workflow","text":"Below you will find a step-by-step. May you be unfamiliar with Github, we recommnand that take a couple of hours to take the set of free courses \" First Day on GitHub \"","title":"Detailed workflow"},{"location":"index.html#step-0-create-an-account-on-github-and-set-up-git","text":"Create an account on Github.com Install the Github Deskop client on your machine. Alternatively, and if you feel confident enough, you can use command line and refer to Github help for guidance. Important May you not be with confortable with command line, we highly recommand that you use the Github Deskop client to handle the Github workflow.","title":"Step 0 - Create an account on Github and set up Git"},{"location":"index.html#step-1-2-3-set-up-a-working-copy-on-your-computer","text":"Fork the repo available on DHIS2's Github account you want to contribute to. This will allow you to quietly work with your own version of the project, without being impacted by the other collaborators' work. In the event that you need to create a new repository that will be added to the documentation workflow, we suggest that you use our template repository . Clone the forked/created from template repository to have it on your local machine and be able to perform any contribution you want to, such as creating a new markdown document or editing a current one. Tools to use A Git client such as Github Desktop . Note You can read more on how to clone and fork repositories using GitHub Desktop . May you want to have more detailed info, or if you deceided you use command line, you can read more on: forking a repository and Creating a repository from a template ; cloning a repository . Note The template repository follows the structure described in the dhis2-docs repo , therefore eases the integration with teh DHIS2 Documentation.","title":"Step 1, 2 &amp; 3 - Set up a working copy on your computer"},{"location":"index.html#step-4-5-create-a-branch-and-start-writing","text":"A best practice consists in creating a branch for any contribution you are about to work on. You want to do this via the Github Desktop client you have installed in Step 0 . Create and/or edit your document using Markdown as language. Save your edits in your local repository. Tools to use A Git client such as Github Desktop to create a banch and a text editor such as Typora to work o the document and save it. Note You can read more on how to create a branch using Github Desktop .","title":"Step 4 &amp; 5 - Create a branch and start writing"},{"location":"index.html#step-6-stage-the-changes","text":"A best practice consists in preparing and checking and probably more importantly choosing the changes you want to commit, especially of you have done a lot of them in various files. Tools to use A Git client such as Github Desktop . Note You can read more on how to Select changes to include in a commit using Github Desktop .","title":"Step 6 - Stage the changes"},{"location":"index.html#step-7-push-to-your-github-repository","text":"Once you have chosen all the changes you want to commit, it is time to push them and make them available on the Github repository you have created in Step 1 . Remember to write a commit message to help other contributors and possible reviewers to understand what you have changed. Tools to use A Git client such as Github Desktop . Note You can read more on how to write a commit message and push your changes using Github Desktop .","title":"Step 7 - Push to your Github repository"},{"location":"index.html#step-8-9-pull-request-update-of-the-fork-and-the-area-specific-documentation-repositories","text":"The changes you have made are now available in your fork. You want to integrate those with the rest of the documentation that is already available in the repository. To do so, you need to send a pull request and merge. In your fork this process should be fairly straightforward as you are the only one to work on it! When the master branch of your repo includes all the changes you wanted to have, meaning when you have approved the pull request mentioned above, and in order to share and publish these changes with your target audience, you need to create a pull request to the area specific documentation repository. Tools to use Tools: a Git client such as Github Desktop and DHIS2's Github account . Note You can read more on how to create a pull request using Github Desktop and/or create a pull request from a fork .","title":"Step 8 &amp; 9 - Pull request &amp; update of the fork and the area specific documentation repositories"},{"location":"index.html#step-10-update-the-doc-portal-when-identified","text":"When the documentation is merged and if it has been identified that it should be published on the DHIS2 Documentation portal you simply need to create an issue in the DHIS2 Documentation repository and assign it to Phil or Matthieu letting us know that resources should be added. Tools to use Tools: The DHIS2 Documentation Repository . Note You can read more on how to create an issue in a Github repository . Alternatively, and when suitable, the documentation can be published directly in the area specific documentation repository. More guidance will be provided.","title":"Step 10 - update the doc portal (when identified)"},{"location":"index.html#step-11-12-1-14-15-translate-the-documentation-when-identified","text":"Note This section will be better described. The documentation produced for specific areas related to DHIS2 such as DHIS2 packages, DHIS2 Academy or DHIS2 Education needs, due to the international footprint of DHIS2, to be translated. The platform to support the translation effort that is integrated with the DHIS2 Documentation and DHIS2 interface is Transifex . Any area specific documentation that is integrated in the DHIS2 Documentation portal is by default pushed as a source file to be translated in Transifex to be translated. Every night the target languages are pulled from Transifex to be built and published in the DHIS2. Please create an issue in the DHIS2 Documentation repository and assign it to Phil (@Philip-Larsen-Donnelly) or Matthieu (@mrwine) letting us know that resources should be added. Documents to be translated and that will remain in the area specific documentation repository without being integrated in the DHIS2 Documentation can still be pushed in Transifex to be translated and translation can be pulled back to the repo. Please create an issue in the DHIS2 Documentation repository and assign it to Phil (@Philip-Larsen-Donnelly) or Matthieu (@mrwine) letting us know that resources should be added.","title":"Step 11, 12, 1, 14 &amp; 15 Translate the documentation (when identified)"},{"location":"index.html#writing-documentation-in-markdown","text":"This is a focus on the step 5 in our workflow As mentioned earlier in these guidelines any written documentation to be produced and shared with the community or a broader audience should be written in Markdown . In short and as written by John Gruber, who co-developed this language, \"Markdown allows you to write using an easy-to-read, easy-to-write plain text format\" 2 . Its design makes it very easy to write, read and convert. It is this simplicity, versatility and the fact that is is widely used to generate static content that pushed us to adopt Markdown. As mentioned in the DHIS2 Documentation repository README we are following the commonmark markdown language. Important If you are not yet familiar with Markdown, have a look at this cheatsheet and spend 10 minutes going through this tutorial . Tip Try to write as many documents as you can using markdown to fasten the learning process and ease the chane. For example, you can write your meeting notes in markdown","title":"Writing documentation in Markdown"},{"location":"index.html#create-a-new-document","text":"Open your preferred text editor such as VS Code or Typora Create a new file and save it in your local repository.","title":"Create a new document"},{"location":"index.html#edit-a-document-already-available-in-repo","text":"This is probably the most straight forward: Open the document in your preferred text editor such as VS Code or Typora Edit and save Tip Remember that you collaborate. This means that other contributors perform changes as well. A best practice is to pull the latest version locally of the repo before starting to edit a document.","title":"Edit a document already available in repo"},{"location":"index.html#convert-a-document-that-we-have-already-created","text":"A lot of documentation has of course already been created and the purpose of setting up this workflow is to work faster and better. So if some disruption is acceptable as part of the adoption process, we should not lose too much time and spend too many efforts to adapt the content item that are now available and close to be ready to be integrated from Google Drive to Open edX. At the same time, we want to keep in mind that the Markdown files need to be our source files, meaning the files containing the latest available vsersion of the content item. Therefore, we highly recommend to use the add-on Docs to Markdown Install the add-on following the procedure described in the GSuite Marketplace. Open the Google doc you want to convert to Markdown In the menu bar, click on 'Add-ons'>'Docs to Markdown'> Convert In the Docs to Markdown pane onth right hand side, click the button 'Markdown' Select the relevant content, basically everything between the <!----- Conversion time ... -----> and <!-- Docs to Markdown version ... --> Copy the selected content and paste it in a newly created source file in your local repo and save it with the .md extension. Check the result of the conversion: pay attention to the warnings generated during the conversion add the images in the local repository and update the links to match the folder structure update the anchors of the headings by replacing the id with the actual heading preceded with a # and in () The heading needs to be transformed a bit and include the words only, in lowercase and with a - between each word. For example my anchor . replace any remaning html tags with markdown language. This specifically applies to tables and images. Save your edits Extracting images To fasten the extraction of images from Google Doc, we suggest that you download the document as a Web page (.html, zipped) . You will find all you images (unamed and uncropped) in one folder. Converting tables To fasten the conversion, you can use online tools such as TableConvert where you can copy/paste the html table and convert into Markdown. Please note that markdown only allows for simple tables . If you have complex tables with a lot of styling such as merged cells, lists and paragraphs, you will need to think through and adopt another way to present the information.","title":"Convert a document that we have already created"},{"location":"index.html#suggested-tools","text":"Tools play a key part in the success in the implementation of these guidelines. Plenty of Markdown editors and convertors are available out there. Provided both our current collaborative environment(s9), Google Drive & Github, and 'philosophy' that we want to follow (open-source, cross-platform,efficient & user friendly tools), we would suggest:","title":"Suggested Tools"},{"location":"index.html#offline-editors","text":"This should be your preferred to either create or edit. Any text editor, can do the job. We strongly recommend that you use one that one which can help with 1) the light styling of Markdown 2) the rendering. Typora (open source & free), available on Linux, MacOSX and Windows is a nice app, that eases the creation of table and integrates mermaid.js to create diagrams. Visual Studio Code , with the extension Markdown Preview Enhanced is another cross-platform tool This one is a bit more tech savvy.","title":"Offline editors"},{"location":"index.html#online-editors","text":"You may want, especially if you are collaborating using Google Drive, use an online editor. In that regard, the open source StackEdit which is integrated with Google Drive as a 3 rd party app can be a good option. It has a WYSIWYG interface, which is pretty handy when beginning with Markdown and allows you to open or create Markdown files directly from Google Drive, once added as an app.","title":"Online editors"},{"location":"index.html#other-markdown-editors","text":"Below is a list of other Markdown editors worth being looked at Offline Atom with the extension Markdown Preview Enhanced , works on Linux, Mac and Windows Online editor Dillinger , free and somehow integrated with Google Drive HAckMD","title":"Other Markdown Editors"},{"location":"index.html#standalone-version-of-the-documentation","text":"In some contexts sharing standalone versions of the documentation is mandatory. The worflow needs to be described. We can already mention though that we recommand to Pandod to generate PDF, docx, pptx versions of the documentation. Feel free to reach us for support.","title":"Standalone version of the documentation"},{"location":"index.html#a-next-step-slides-towards-a-more-automatised-workflow","text":"I am testing tools to use Markdown to create slides and this looks promising. If it is successful this would be a tremendous way forward in terms of integration especially to the translation workflow. More to come...","title":"A next step - slides, towards a more automatised workflow"},{"location":"index.html#extra-resources","text":"","title":"Extra resources"},{"location":"index.html#git-and-github","text":"GIT Documentation Github Documentation","title":"GIT and Github"},{"location":"index.html#markdown","text":"Commonmark Cheatsheet using mermaid.js , which is integrated in Typora as well as in Atom and Visual Studio Code with the mardown extension Markdown Preview Enhanced \u21a9 source: https://daringfireball.net/projects/markdown/ \u21a9","title":"Markdown"},{"location":"en/Building%20your%20documentation.html","text":"Building your documentation \u00b6 Setting up a local environment to publish markdocs as in docs.dhis2.org \u00b6 DHIS2 Documentation publishes the documentation using Mkdocs as a site generator themed with Material for Mkdocs . Below are the steps to create this environment on your local machine, tested using a Mac. Setting this environment locally allows you to test the look-and-feel of your documentation before pushing it on the Github repository either for publication directly on the repo or on the main DHIS2 Documentation portal. Setting up the environment \u00b6 Checking version of Python. if running Python 2.7 upgrade -if on Windows or Linux, install -if on Mac a newer version 3.x. On Mac run brew install python3 then check that Python3.x is installed running python3 --version Source: https://osxdaily.com/2018/06/13/how-install-update-python-3x-mac/ Make sure your pip is set to Python3.x by running pip3 install --upgrade --force pip . You may need to append sudo Source: https://stackoverflow.com/questions/38938205/how-to-override-the-pip-command-to-python3-x-instead-of-python2-7/38938246 To run a similiar look and feel as in docs.dhis2.org, you want to use Material fro Mkdocs running pip install mkdocs-material . Getting started \u00b6 run mkdocs new PROJECT_DIRECTORY . Assuming that you have a local repo of your Github repo, the PROJECT_DIRECTORY is your local repo. This command will create a docs folder, an index.md file as well as a mkdocs.yml file. Source: https://www.mkdocs.org/#getting-started run the mkdocs serve command to start the built-in server Copy/paste the following url http://127.0.0.1:8000/ in your browser, and you'll see the default home page being displayed Source: https://www.mkdocs.org/#getting-started Creating your documentation \u00b6 Write your documentation in markdown- More guidelines here: https://www.mkdocs.org/user-guide/writing-your-docs/ Edit the mkdocs.yml file. Feel free to copy the one used in this repo as a starting point. More guidelines on the MkDocs website and Material for MkDocs Regularly check http://127.0.0.1:8000/ to see the result of your edits.","title":"Building your documentation"},{"location":"en/Building%20your%20documentation.html#building-your-documentation","text":"","title":"Building your documentation"},{"location":"en/Building%20your%20documentation.html#setting-up-a-local-environment-to-publish-markdocs-as-in-docsdhis2org","text":"DHIS2 Documentation publishes the documentation using Mkdocs as a site generator themed with Material for Mkdocs . Below are the steps to create this environment on your local machine, tested using a Mac. Setting this environment locally allows you to test the look-and-feel of your documentation before pushing it on the Github repository either for publication directly on the repo or on the main DHIS2 Documentation portal.","title":"Setting up a local environment to publish markdocs as in docs.dhis2.org"},{"location":"en/Building%20your%20documentation.html#setting-up-the-environment","text":"Checking version of Python. if running Python 2.7 upgrade -if on Windows or Linux, install -if on Mac a newer version 3.x. On Mac run brew install python3 then check that Python3.x is installed running python3 --version Source: https://osxdaily.com/2018/06/13/how-install-update-python-3x-mac/ Make sure your pip is set to Python3.x by running pip3 install --upgrade --force pip . You may need to append sudo Source: https://stackoverflow.com/questions/38938205/how-to-override-the-pip-command-to-python3-x-instead-of-python2-7/38938246 To run a similiar look and feel as in docs.dhis2.org, you want to use Material fro Mkdocs running pip install mkdocs-material .","title":"Setting up the environment"},{"location":"en/Building%20your%20documentation.html#getting-started","text":"run mkdocs new PROJECT_DIRECTORY . Assuming that you have a local repo of your Github repo, the PROJECT_DIRECTORY is your local repo. This command will create a docs folder, an index.md file as well as a mkdocs.yml file. Source: https://www.mkdocs.org/#getting-started run the mkdocs serve command to start the built-in server Copy/paste the following url http://127.0.0.1:8000/ in your browser, and you'll see the default home page being displayed Source: https://www.mkdocs.org/#getting-started","title":"Getting started"},{"location":"en/Building%20your%20documentation.html#creating-your-documentation","text":"Write your documentation in markdown- More guidelines here: https://www.mkdocs.org/user-guide/writing-your-docs/ Edit the mkdocs.yml file. Feel free to copy the one used in this repo as a starting point. More guidelines on the MkDocs website and Material for MkDocs Regularly check http://127.0.0.1:8000/ to see the result of your edits.","title":"Creating your documentation"},{"location":"en/name_tbd_INDEX.html","text":"!INCLUDE \"path-to-file1.md\" !INCLUDE \"path-to-file2.md\"","title":"title"},{"location":"en/workflow-dhis2-doc.html","text":"Suggested workflow to contribute to area specific documentation \u00b6 The following sequence diagram, drawn using mermaid.js illustrates in a simplified way how collaborators should contribute to a specific area documentation such as DHIS2 COVID19 Documentation or DHIS2 Android App. We haven't found a way to display mermaid.js diagrams in Github yet, therefore we are using the mermaid.js Live Editor to generate an image a putting it in the documentation. Feel free to copy the code below and paste it in the mermaid.js Live Editor to try it out. sequenceDiagram autonumber participant A as docs.dhis2.org participant B as Area specific documentation Repo participant C as Contributor Repo participant D as Contributor's Machine participant E as Transifex Note over B: Contributor wants to contribute alt fork B->>C: creates a fork else create a new repo B->>C: creates a repo from template end C->>D: clones the repo loop repeats for each commit Note over D: Contributor starts to contribute activate D D->>D: creates a branch D->>D: creates or edits a document deactivate D Note over D: Contributor wants to share D->>D: stages the contribution D->>C: pushes the contribution C->>C: merges to master branch C->>B: create a Pull request to merge opt when identified A->>A: create an issue for publication end end opt when identified alt if kept as a standalone documentation project B->>E: updates related project for translation else if integrated to docs.dhis2.org A->>E: updates related project for translation end E->>E: translates strings alt if kept as a standalone documentation project E-->>B: pulls translated strings else if integrated to docs.dhis2.org E-->>A: pulls translated strings end end","title":"Suggested workflow"},{"location":"en/workflow-dhis2-doc.html#suggested-workflow-to-contribute-to-area-specific-documentation","text":"The following sequence diagram, drawn using mermaid.js illustrates in a simplified way how collaborators should contribute to a specific area documentation such as DHIS2 COVID19 Documentation or DHIS2 Android App. We haven't found a way to display mermaid.js diagrams in Github yet, therefore we are using the mermaid.js Live Editor to generate an image a putting it in the documentation. Feel free to copy the code below and paste it in the mermaid.js Live Editor to try it out. sequenceDiagram autonumber participant A as docs.dhis2.org participant B as Area specific documentation Repo participant C as Contributor Repo participant D as Contributor's Machine participant E as Transifex Note over B: Contributor wants to contribute alt fork B->>C: creates a fork else create a new repo B->>C: creates a repo from template end C->>D: clones the repo loop repeats for each commit Note over D: Contributor starts to contribute activate D D->>D: creates a branch D->>D: creates or edits a document deactivate D Note over D: Contributor wants to share D->>D: stages the contribution D->>C: pushes the contribution C->>C: merges to master branch C->>B: create a Pull request to merge opt when identified A->>A: create an issue for publication end end opt when identified alt if kept as a standalone documentation project B->>E: updates related project for translation else if integrated to docs.dhis2.org A->>E: updates related project for translation end E->>E: translates strings alt if kept as a standalone documentation project E-->>B: pulls translated strings else if integrated to docs.dhis2.org E-->>A: pulls translated strings end end","title":"Suggested workflow to contribute to area specific documentation"}]}